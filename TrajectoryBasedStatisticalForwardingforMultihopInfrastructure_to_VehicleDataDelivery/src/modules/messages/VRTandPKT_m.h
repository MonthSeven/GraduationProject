//
// Generated file, do not edit! Created by nedtool 4.6 from src/modules/messages/VRTandPKT.msg.
//

#ifndef _VRTANDPKT_M_H_
#define _VRTANDPKT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "Coord.h"
// }}

/**
 * Struct generated from src/modules/messages/VRTandPKT.msg:13 by nedtool.
 */
struct vrtStruct
{
    vrtStruct();
    int nodeMacAdd;
    opp_string nodeID;
    Coord nodePosition;
    double nodeSpeed;
    double nodeEDD_Value;
    simtime_t lastUpdateTime;
    int NumHopsToDst;
    simtime_t rtTTL;
};

void doPacking(cCommBuffer *b, vrtStruct& a);
void doUnpacking(cCommBuffer *b, vrtStruct& a);

// cplusplus {{
#include "map"
#include "vector"
typedef std::map<std::string, double> senderEDDs;
typedef std::map<std::string, std::vector<vrtStruct>> multRSUsRt;
// }}

/**
 * Class generated from <tt>src/modules/messages/VRTandPKT.msg:46</tt> by nedtool.
 * <pre>
 * packet multipleRSUsRTpkt
 * {
 *     int priority;
 *     //    packet to be sent 
 *     string pktSourceID;
 *     int seqNumber = 0;
 *     string pktDestinationID;//The id of RSU destinned the packet
 *     int pktDestinationMac;//The Mac of RSU destinned the packet
 *     string pktActualsrcID;//the id of next carrier of packet
 *     int pktActualsrcMac;//the Mac of the next carrier of the packet 
 *     int pktActualdestMac;//Current Carrier Mac Address
 *     simtime_t pktGenerationTime;//The time the packet is generated
 *     simtime_t pktlastReceiveTime;//The time the current carrier received the packet
 *     simtime_t DestArrivalTime;//The time the packet reached the destination
 *     simtime_t pktTTL;//time to live of the packet
 * 
 * // end of packet to be sent 
 * 
 *     int channelNumber; //  Channel Number on which this packet was sent (Used in mac handle upperMessage)
 *     //    for routing table
 *     int rtsenderMacAdd; //RT sender ID
 *     //here include send routing table in packet
 *     string rtsenderID;
 *     Coord rtsenderPosition; //RT Sender Position
 *     double rtsenderSpeed; //RT Sender Speed
 *     simtime_t rtsendingTime; //RT Sending time stamp
 *     senderEDDs rtmyEDDs;
 *     multRSUsRt rtrouting_table;
 *     //    end for routing table
 *     string myid;
 * }
 * </pre>
 */
class multipleRSUsRTpkt : public ::cPacket
{
  protected:
    int priority_var;
    opp_string pktSourceID_var;
    int seqNumber_var;
    opp_string pktDestinationID_var;
    int pktDestinationMac_var;
    opp_string pktActualsrcID_var;
    int pktActualsrcMac_var;
    int pktActualdestMac_var;
    simtime_t pktGenerationTime_var;
    simtime_t pktlastReceiveTime_var;
    simtime_t DestArrivalTime_var;
    simtime_t pktTTL_var;
    int channelNumber_var;
    int rtsenderMacAdd_var;
    opp_string rtsenderID_var;
    Coord rtsenderPosition_var;
    double rtsenderSpeed_var;
    simtime_t rtsendingTime_var;
    senderEDDs rtmyEDDs_var;
    multRSUsRt rtrouting_table_var;
    opp_string myid_var;

  private:
    void copy(const multipleRSUsRTpkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const multipleRSUsRTpkt&);

  public:
    multipleRSUsRTpkt(const char *name=NULL, int kind=0);
    multipleRSUsRTpkt(const multipleRSUsRTpkt& other);
    virtual ~multipleRSUsRTpkt();
    multipleRSUsRTpkt& operator=(const multipleRSUsRTpkt& other);
    virtual multipleRSUsRTpkt *dup() const {return new multipleRSUsRTpkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual const char * getPktSourceID() const;
    virtual void setPktSourceID(const char * pktSourceID);
    virtual int getSeqNumber() const;
    virtual void setSeqNumber(int seqNumber);
    virtual const char * getPktDestinationID() const;
    virtual void setPktDestinationID(const char * pktDestinationID);
    virtual int getPktDestinationMac() const;
    virtual void setPktDestinationMac(int pktDestinationMac);
    virtual const char * getPktActualsrcID() const;
    virtual void setPktActualsrcID(const char * pktActualsrcID);
    virtual int getPktActualsrcMac() const;
    virtual void setPktActualsrcMac(int pktActualsrcMac);
    virtual int getPktActualdestMac() const;
    virtual void setPktActualdestMac(int pktActualdestMac);
    virtual simtime_t getPktGenerationTime() const;
    virtual void setPktGenerationTime(simtime_t pktGenerationTime);
    virtual simtime_t getPktlastReceiveTime() const;
    virtual void setPktlastReceiveTime(simtime_t pktlastReceiveTime);
    virtual simtime_t getDestArrivalTime() const;
    virtual void setDestArrivalTime(simtime_t DestArrivalTime);
    virtual simtime_t getPktTTL() const;
    virtual void setPktTTL(simtime_t pktTTL);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual int getRtsenderMacAdd() const;
    virtual void setRtsenderMacAdd(int rtsenderMacAdd);
    virtual const char * getRtsenderID() const;
    virtual void setRtsenderID(const char * rtsenderID);
    virtual Coord& getRtsenderPosition();
    virtual const Coord& getRtsenderPosition() const {return const_cast<multipleRSUsRTpkt*>(this)->getRtsenderPosition();}
    virtual void setRtsenderPosition(const Coord& rtsenderPosition);
    virtual double getRtsenderSpeed() const;
    virtual void setRtsenderSpeed(double rtsenderSpeed);
    virtual simtime_t getRtsendingTime() const;
    virtual void setRtsendingTime(simtime_t rtsendingTime);
    virtual senderEDDs& getRtmyEDDs();
    virtual const senderEDDs& getRtmyEDDs() const {return const_cast<multipleRSUsRTpkt*>(this)->getRtmyEDDs();}
    virtual void setRtmyEDDs(const senderEDDs& rtmyEDDs);
    virtual multRSUsRt& getRtrouting_table();
    virtual const multRSUsRt& getRtrouting_table() const {return const_cast<multipleRSUsRTpkt*>(this)->getRtrouting_table();}
    virtual void setRtrouting_table(const multRSUsRt& rtrouting_table);
    virtual const char * getMyid() const;
    virtual void setMyid(const char * myid);
};

inline void doPacking(cCommBuffer *b, multipleRSUsRTpkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, multipleRSUsRTpkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef _VRTANDPKT_M_H_


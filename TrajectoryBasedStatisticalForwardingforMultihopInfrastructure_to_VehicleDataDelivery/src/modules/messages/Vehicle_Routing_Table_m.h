//
// Generated file, do not edit! Created by nedtool 4.6 from src/modules/messages/Vehicle_Routing_Table.msg.
//

#ifndef _VEHICLE_ROUTING_TABLE_M_H_
#define _VEHICLE_ROUTING_TABLE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "Coord.h"
//#include "string.h"
// }}

/**
 * Struct generated from src/modules/messages/Vehicle_Routing_Table.msg:26 by nedtool.
 */
struct Veh_Routing_Table
{
    Veh_Routing_Table();
    int nodeMacAdd;
    opp_string nodestrid;
    Coord vehPosition;
    double vehSpeed;
    double EDD_Value;
    simtime_t lastUpdateTime;
    simtime_t rtTTL;
};

void doPacking(cCommBuffer *b, Veh_Routing_Table& a);
void doUnpacking(cCommBuffer *b, Veh_Routing_Table& a);

/**
 * Class generated from <tt>src/modules/messages/Vehicle_Routing_Table.msg:38</tt> by nedtool.
 * <pre>
 * packet VRT
 * {
 *     //here include send routing table in packet
 *     //	int senderID; //RT sender ID
 *     //	char SenderHostID[]; //Full name of the sending host
 *     string extID;
 *     int senderMacAdd; //RT sender ID
 *     string sendernodeStrId;
 *     Coord senderPosition; //RT Sender Position
 *     double senderSpeed; //RT Sender Speed
 *     double senderEDD_value; //RT Sender EDD
 *     simtime_t sendingTime; //RT Sending time stamp
 *     int priority = 3;
 *     //end of send routing table packet
 * 
 *     Veh_Routing_Table RT[];
 * }
 * </pre>
 */
class VRT : public ::cPacket
{
  protected:
    opp_string extID_var;
    int senderMacAdd_var;
    opp_string sendernodeStrId_var;
    Coord senderPosition_var;
    double senderSpeed_var;
    double senderEDD_value_var;
    simtime_t sendingTime_var;
    int priority_var;
    Veh_Routing_Table *RT_var; // array ptr
    unsigned int RT_arraysize;

  private:
    void copy(const VRT& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VRT&);

  public:
    VRT(const char *name=NULL, int kind=0);
    VRT(const VRT& other);
    virtual ~VRT();
    VRT& operator=(const VRT& other);
    virtual VRT *dup() const {return new VRT(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getExtID() const;
    virtual void setExtID(const char * extID);
    virtual int getSenderMacAdd() const;
    virtual void setSenderMacAdd(int senderMacAdd);
    virtual const char * getSendernodeStrId() const;
    virtual void setSendernodeStrId(const char * sendernodeStrId);
    virtual Coord& getSenderPosition();
    virtual const Coord& getSenderPosition() const {return const_cast<VRT*>(this)->getSenderPosition();}
    virtual void setSenderPosition(const Coord& senderPosition);
    virtual double getSenderSpeed() const;
    virtual void setSenderSpeed(double senderSpeed);
    virtual double getSenderEDD_value() const;
    virtual void setSenderEDD_value(double senderEDD_value);
    virtual simtime_t getSendingTime() const;
    virtual void setSendingTime(simtime_t sendingTime);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual void setRTArraySize(unsigned int size);
    virtual unsigned int getRTArraySize() const;
    virtual Veh_Routing_Table& getRT(unsigned int k);
    virtual const Veh_Routing_Table& getRT(unsigned int k) const {return const_cast<VRT*>(this)->getRT(k);}
    virtual void setRT(unsigned int k, const Veh_Routing_Table& RT);
};

inline void doPacking(cCommBuffer *b, VRT& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VRT& obj) {obj.parsimUnpack(b);}


#endif // ifndef _VEHICLE_ROUTING_TABLE_M_H_


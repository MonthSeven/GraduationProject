//
// Generated file, do not edit! Created by nedtool 4.6 from src/modules/messages/packetToSend.msg.
//

#ifndef _PACKETTOSEND_M_H_
#define _PACKETTOSEND_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "Coord.h"
// }}

/**
 * Class generated from <tt>src/modules/messages/packetToSend.msg:8</tt> by nedtool.
 * <pre>
 * packet pkt_Send
 * {
 *     //    int sourceMac;//Mac address of the source Module (Node or RSU)
 *     string sourceID;
 *     int seqNumber = 0;
 *     string destinationID;//The id of RSU destinned the packet
 *     int destinationMac;//The Mac of RSU destinned the packet
 *     string actualsrcID;//the id of next carrier of packet
 *     int actualsrcMac;//the Mac of the next carrier of the packet	
 *     int actualdestMac;//Current Carrier Mac Address
 *     simtime_t pktGenerationTime;//The time the packet is generated
 *     simtime_t lastReceiveTime;//The time the current carrier received the packet
 *     simtime_t DestArrivalTime;//The time the packet reached the destination
 *     simtime_t ttl;//time to live of the packet
 *     int priority = 1;
 * }
 * </pre>
 */
class pkt_Send : public ::cPacket
{
  protected:
    opp_string sourceID_var;
    int seqNumber_var;
    opp_string destinationID_var;
    int destinationMac_var;
    opp_string actualsrcID_var;
    int actualsrcMac_var;
    int actualdestMac_var;
    simtime_t pktGenerationTime_var;
    simtime_t lastReceiveTime_var;
    simtime_t DestArrivalTime_var;
    simtime_t ttl_var;
    int priority_var;

  private:
    void copy(const pkt_Send& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const pkt_Send&);

  public:
    pkt_Send(const char *name=NULL, int kind=0);
    pkt_Send(const pkt_Send& other);
    virtual ~pkt_Send();
    pkt_Send& operator=(const pkt_Send& other);
    virtual pkt_Send *dup() const {return new pkt_Send(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSourceID() const;
    virtual void setSourceID(const char * sourceID);
    virtual int getSeqNumber() const;
    virtual void setSeqNumber(int seqNumber);
    virtual const char * getDestinationID() const;
    virtual void setDestinationID(const char * destinationID);
    virtual int getDestinationMac() const;
    virtual void setDestinationMac(int destinationMac);
    virtual const char * getActualsrcID() const;
    virtual void setActualsrcID(const char * actualsrcID);
    virtual int getActualsrcMac() const;
    virtual void setActualsrcMac(int actualsrcMac);
    virtual int getActualdestMac() const;
    virtual void setActualdestMac(int actualdestMac);
    virtual simtime_t getPktGenerationTime() const;
    virtual void setPktGenerationTime(simtime_t pktGenerationTime);
    virtual simtime_t getLastReceiveTime() const;
    virtual void setLastReceiveTime(simtime_t lastReceiveTime);
    virtual simtime_t getDestArrivalTime() const;
    virtual void setDestArrivalTime(simtime_t DestArrivalTime);
    virtual simtime_t getTtl() const;
    virtual void setTtl(simtime_t ttl);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
};

inline void doPacking(cCommBuffer *b, pkt_Send& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, pkt_Send& obj) {obj.parsimUnpack(b);}


#endif // ifndef _PACKETTOSEND_M_H_

